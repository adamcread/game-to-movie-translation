{"env_info": "sys.platform: linux\nPython: 3.8.11 (default, Jul  3 2021, 17:53:42) [GCC 7.5.0]\nCUDA available: True\nGPU 0: NVIDIA TITAN RTX\nCUDA_HOME: /apps/cuda/cuda-11.0-cudnn8.0\nNVCC: Not Available\nGCC: x86_64-linux-gnu-gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0\nPyTorch: 1.7.1+cu110\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.2+cu110\nOpenCV: 4.5.5\nMMCV: 1.5.0\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMClassification: 0.23.0+54b7d54", "seed": 1313777485, "mmcls_version": "0.23.0", "config": "model = dict(\n    type='ImageClassifier',\n    backbone=dict(\n        type='SwinTransformer', arch='tiny', img_size=224, drop_path_rate=0.2),\n    neck=dict(type='GlobalAveragePooling'),\n    head=dict(\n        type='LinearClsHead',\n        num_classes=5,\n        in_channels=768,\n        init_cfg=None,\n        loss=dict(\n            type='LabelSmoothLoss', label_smooth_val=0.1, mode='original'),\n        cal_acc=False),\n    init_cfg=[\n        dict(type='TruncNormal', layer='Linear', std=0.02, bias=0.0),\n        dict(type='Constant', layer='LayerNorm', val=1.0, bias=0.0)\n    ],\n    train_cfg=dict(augments=[\n        dict(type='BatchMixup', alpha=0.8, num_classes=5, prob=0.5),\n        dict(type='BatchCutMix', alpha=1.0, num_classes=5, prob=0.5)\n    ]))\nrand_increasing_policies = [\n    dict(type='AutoContrast'),\n    dict(type='Equalize'),\n    dict(type='Invert'),\n    dict(type='Rotate', magnitude_key='angle', magnitude_range=(0, 30)),\n    dict(type='Posterize', magnitude_key='bits', magnitude_range=(4, 0)),\n    dict(type='Solarize', magnitude_key='thr', magnitude_range=(256, 0)),\n    dict(\n        type='SolarizeAdd',\n        magnitude_key='magnitude',\n        magnitude_range=(0, 110)),\n    dict(\n        type='ColorTransform',\n        magnitude_key='magnitude',\n        magnitude_range=(0, 0.9)),\n    dict(type='Contrast', magnitude_key='magnitude', magnitude_range=(0, 0.9)),\n    dict(\n        type='Brightness', magnitude_key='magnitude',\n        magnitude_range=(0, 0.9)),\n    dict(\n        type='Sharpness', magnitude_key='magnitude', magnitude_range=(0, 0.9)),\n    dict(\n        type='Shear',\n        magnitude_key='magnitude',\n        magnitude_range=(0, 0.3),\n        direction='horizontal'),\n    dict(\n        type='Shear',\n        magnitude_key='magnitude',\n        magnitude_range=(0, 0.3),\n        direction='vertical'),\n    dict(\n        type='Translate',\n        magnitude_key='magnitude',\n        magnitude_range=(0, 0.45),\n        direction='horizontal'),\n    dict(\n        type='Translate',\n        magnitude_key='magnitude',\n        magnitude_range=(0, 0.45),\n        direction='vertical')\n]\ndataset_type = 'ImageNet'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='RandomResizedCrop',\n        size=224,\n        backend='pillow',\n        interpolation='bicubic'),\n    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),\n    dict(\n        type='RandAugment',\n        policies=[\n            dict(type='AutoContrast'),\n            dict(type='Equalize'),\n            dict(type='Invert'),\n            dict(\n                type='Rotate', magnitude_key='angle', magnitude_range=(0, 30)),\n            dict(\n                type='Posterize', magnitude_key='bits',\n                magnitude_range=(4, 0)),\n            dict(\n                type='Solarize', magnitude_key='thr',\n                magnitude_range=(256, 0)),\n            dict(\n                type='SolarizeAdd',\n                magnitude_key='magnitude',\n                magnitude_range=(0, 110)),\n            dict(\n                type='ColorTransform',\n                magnitude_key='magnitude',\n                magnitude_range=(0, 0.9)),\n            dict(\n                type='Contrast',\n                magnitude_key='magnitude',\n                magnitude_range=(0, 0.9)),\n            dict(\n                type='Brightness',\n                magnitude_key='magnitude',\n                magnitude_range=(0, 0.9)),\n            dict(\n                type='Sharpness',\n                magnitude_key='magnitude',\n                magnitude_range=(0, 0.9)),\n            dict(\n                type='Shear',\n                magnitude_key='magnitude',\n                magnitude_range=(0, 0.3),\n                direction='horizontal'),\n            dict(\n                type='Shear',\n                magnitude_key='magnitude',\n                magnitude_range=(0, 0.3),\n                direction='vertical'),\n            dict(\n                type='Translate',\n                magnitude_key='magnitude',\n                magnitude_range=(0, 0.45),\n                direction='horizontal'),\n            dict(\n                type='Translate',\n                magnitude_key='magnitude',\n                magnitude_range=(0, 0.45),\n                direction='vertical')\n        ],\n        num_policies=2,\n        total_level=10,\n        magnitude_level=9,\n        magnitude_std=0.5,\n        hparams=dict(pad_val=[104, 116, 124], interpolation='bicubic')),\n    dict(\n        type='RandomErasing',\n        erase_prob=0.25,\n        mode='rand',\n        min_area_ratio=0.02,\n        max_area_ratio=0.3333333333333333,\n        fill_color=[103.53, 116.28, 123.675],\n        fill_std=[57.375, 57.12, 58.395]),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='ImageToTensor', keys=['img']),\n    dict(type='ToTensor', keys=['gt_label']),\n    dict(type='Collect', keys=['img', 'gt_label'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='Resize',\n        size=(256, -1),\n        backend='pillow',\n        interpolation='bicubic'),\n    dict(type='CenterCrop', crop_size=224),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='ImageToTensor', keys=['img']),\n    dict(type='Collect', keys=['img'])\n]\ndata = dict(\n    samples_per_gpu=64,\n    workers_per_gpu=8,\n    train=dict(\n        type='ImageNet',\n        data_prefix='../dataset/patches/classified/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='RandomResizedCrop',\n                size=224,\n                backend='pillow',\n                interpolation='bicubic'),\n            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),\n            dict(\n                type='RandAugment',\n                policies=[\n                    dict(type='AutoContrast'),\n                    dict(type='Equalize'),\n                    dict(type='Invert'),\n                    dict(\n                        type='Rotate',\n                        magnitude_key='angle',\n                        magnitude_range=(0, 30)),\n                    dict(\n                        type='Posterize',\n                        magnitude_key='bits',\n                        magnitude_range=(4, 0)),\n                    dict(\n                        type='Solarize',\n                        magnitude_key='thr',\n                        magnitude_range=(256, 0)),\n                    dict(\n                        type='SolarizeAdd',\n                        magnitude_key='magnitude',\n                        magnitude_range=(0, 110)),\n                    dict(\n                        type='ColorTransform',\n                        magnitude_key='magnitude',\n                        magnitude_range=(0, 0.9)),\n                    dict(\n                        type='Contrast',\n                        magnitude_key='magnitude',\n                        magnitude_range=(0, 0.9)),\n                    dict(\n                        type='Brightness',\n                        magnitude_key='magnitude',\n                        magnitude_range=(0, 0.9)),\n                    dict(\n                        type='Sharpness',\n                        magnitude_key='magnitude',\n                        magnitude_range=(0, 0.9)),\n                    dict(\n                        type='Shear',\n                        magnitude_key='magnitude',\n                        magnitude_range=(0, 0.3),\n                        direction='horizontal'),\n                    dict(\n                        type='Shear',\n                        magnitude_key='magnitude',\n                        magnitude_range=(0, 0.3),\n                        direction='vertical'),\n                    dict(\n                        type='Translate',\n                        magnitude_key='magnitude',\n                        magnitude_range=(0, 0.45),\n                        direction='horizontal'),\n                    dict(\n                        type='Translate',\n                        magnitude_key='magnitude',\n                        magnitude_range=(0, 0.45),\n                        direction='vertical')\n                ],\n                num_policies=2,\n                total_level=10,\n                magnitude_level=9,\n                magnitude_std=0.5,\n                hparams=dict(pad_val=[104, 116, 124],\n                             interpolation='bicubic')),\n            dict(\n                type='RandomErasing',\n                erase_prob=0.25,\n                mode='rand',\n                min_area_ratio=0.02,\n                max_area_ratio=0.3333333333333333,\n                fill_color=[103.53, 116.28, 123.675],\n                fill_std=[57.375, 57.12, 58.395]),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='ToTensor', keys=['gt_label']),\n            dict(type='Collect', keys=['img', 'gt_label'])\n        ],\n        classes='../dataset/annotation/classes.txt'),\n    val=dict(\n        type='ImageNet',\n        data_prefix='../dataset/patches/classified/val/',\n        ann_file='../dataset/annotation/val.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='Resize',\n                size=(256, -1),\n                backend='pillow',\n                interpolation='bicubic'),\n            dict(type='CenterCrop', crop_size=224),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ],\n        classes='../dataset/annotation/classes.txt'),\n    test=dict(\n        type='ImageNet',\n        data_prefix='../dataset/patches/classified/val/',\n        ann_file='../dataset/annotation/classes/val.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='Resize',\n                size=(256, -1),\n                backend='pillow',\n                interpolation='bicubic'),\n            dict(type='CenterCrop', crop_size=224),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ],\n        classes='../dataset/annotation/classes.txt'))\nevaluation = dict(interval=5, metric='accuracy')\nparamwise_cfg = dict(\n    norm_decay_mult=0.0,\n    bias_decay_mult=0.0,\n    custom_keys=dict({\n        '.absolute_pos_embed': dict(decay_mult=0.0),\n        '.relative_position_bias_table': dict(decay_mult=0.0)\n    }))\noptimizer = dict(\n    type='AdamW',\n    lr=0.001,\n    weight_decay=0.05,\n    eps=1e-08,\n    betas=(0.9, 0.999),\n    paramwise_cfg=dict(\n        norm_decay_mult=0.0,\n        bias_decay_mult=0.0,\n        custom_keys=dict({\n            '.absolute_pos_embed': dict(decay_mult=0.0),\n            '.relative_position_bias_table': dict(decay_mult=0.0)\n        })))\noptimizer_config = dict(grad_clip=dict(max_norm=5.0))\nlr_config = dict(\n    policy='CosineAnnealing',\n    by_epoch=False,\n    min_lr_ratio=0.01,\n    warmup='linear',\n    warmup_ratio=0.001,\n    warmup_iters=20,\n    warmup_by_epoch=True)\nrunner = dict(type='EpochBasedRunner', max_epochs=300)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = './checkpoints/swin_small_224_b16x64_300e_imagenet_20210615_110219-7f9d988b.pth'\nresume_from = None\nworkflow = [('train', 1)]\nwork_dir = './work_dirs/swin_tiny'\ngpu_ids = [0]\nseed = 1313777485\n", "CLASSES": ["full-body-sitting", "full-body-standing", "half-body", "head-only", "other"]}
{"mode": "val", "epoch": 5, "iter": 4, "lr": 0.00025, "accuracy_top-1": 65.2, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 10, "iter": 4, "lr": 0.0005, "accuracy_top-1": 72.0, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 15, "iter": 4, "lr": 0.00074, "accuracy_top-1": 69.2, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 20, "iter": 4, "lr": 0.00099, "accuracy_top-1": 72.0, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 25, "iter": 4, "lr": 0.00098, "accuracy_top-1": 71.6, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 30, "iter": 4, "lr": 0.00098, "accuracy_top-1": 70.0, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 35, "iter": 4, "lr": 0.00097, "accuracy_top-1": 74.0, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 40, "iter": 4, "lr": 0.00096, "accuracy_top-1": 74.0, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 45, "iter": 4, "lr": 0.00095, "accuracy_top-1": 71.6, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 50, "iter": 4, "lr": 0.00093, "accuracy_top-1": 73.6, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 55, "iter": 4, "lr": 0.00092, "accuracy_top-1": 76.8, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 60, "iter": 4, "lr": 0.00091, "accuracy_top-1": 75.2, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 65, "iter": 4, "lr": 0.00089, "accuracy_top-1": 76.4, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 70, "iter": 4, "lr": 0.00087, "accuracy_top-1": 75.2, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 75, "iter": 4, "lr": 0.00086, "accuracy_top-1": 73.6, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 80, "iter": 4, "lr": 0.00084, "accuracy_top-1": 76.8, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 85, "iter": 4, "lr": 0.00082, "accuracy_top-1": 75.2, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 90, "iter": 4, "lr": 0.0008, "accuracy_top-1": 76.4, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 95, "iter": 4, "lr": 0.00077, "accuracy_top-1": 77.6, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 100, "iter": 4, "lr": 0.00075, "accuracy_top-1": 78.8, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 105, "iter": 4, "lr": 0.00073, "accuracy_top-1": 78.8, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 110, "iter": 4, "lr": 0.00071, "accuracy_top-1": 78.4, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 115, "iter": 4, "lr": 0.00068, "accuracy_top-1": 78.4, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 120, "iter": 4, "lr": 0.00066, "accuracy_top-1": 78.4, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 125, "iter": 4, "lr": 0.00063, "accuracy_top-1": 80.8, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 130, "iter": 4, "lr": 0.00061, "accuracy_top-1": 78.0, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 135, "iter": 4, "lr": 0.00058, "accuracy_top-1": 79.2, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 140, "iter": 4, "lr": 0.00056, "accuracy_top-1": 78.8, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 145, "iter": 4, "lr": 0.00053, "accuracy_top-1": 80.4, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 150, "iter": 4, "lr": 0.00051, "accuracy_top-1": 78.8, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 155, "iter": 4, "lr": 0.00048, "accuracy_top-1": 81.2, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 160, "iter": 4, "lr": 0.00045, "accuracy_top-1": 83.6, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 165, "iter": 4, "lr": 0.00043, "accuracy_top-1": 81.2, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 170, "iter": 4, "lr": 0.0004, "accuracy_top-1": 80.8, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 175, "iter": 4, "lr": 0.00038, "accuracy_top-1": 80.4, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 180, "iter": 4, "lr": 0.00035, "accuracy_top-1": 79.2, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 185, "iter": 4, "lr": 0.00033, "accuracy_top-1": 83.2, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 190, "iter": 4, "lr": 0.0003, "accuracy_top-1": 82.8, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 195, "iter": 4, "lr": 0.00028, "accuracy_top-1": 82.8, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 200, "iter": 4, "lr": 0.00026, "accuracy_top-1": 83.2, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 205, "iter": 4, "lr": 0.00024, "accuracy_top-1": 82.4, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 210, "iter": 4, "lr": 0.00021, "accuracy_top-1": 82.8, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 215, "iter": 4, "lr": 0.00019, "accuracy_top-1": 84.0, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 220, "iter": 4, "lr": 0.00017, "accuracy_top-1": 82.8, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 225, "iter": 4, "lr": 0.00016, "accuracy_top-1": 81.6, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 230, "iter": 4, "lr": 0.00014, "accuracy_top-1": 84.0, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 235, "iter": 4, "lr": 0.00012, "accuracy_top-1": 84.4, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 240, "iter": 4, "lr": 0.0001, "accuracy_top-1": 84.0, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 245, "iter": 4, "lr": 9e-05, "accuracy_top-1": 84.4, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 250, "iter": 4, "lr": 8e-05, "accuracy_top-1": 84.4, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 255, "iter": 4, "lr": 6e-05, "accuracy_top-1": 85.2, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 260, "iter": 4, "lr": 5e-05, "accuracy_top-1": 86.0, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 265, "iter": 4, "lr": 4e-05, "accuracy_top-1": 86.0, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 270, "iter": 4, "lr": 3e-05, "accuracy_top-1": 86.0, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 275, "iter": 4, "lr": 3e-05, "accuracy_top-1": 87.6, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 280, "iter": 4, "lr": 2e-05, "accuracy_top-1": 86.4, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 285, "iter": 4, "lr": 2e-05, "accuracy_top-1": 86.8, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 290, "iter": 4, "lr": 1e-05, "accuracy_top-1": 86.8, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 295, "iter": 4, "lr": 1e-05, "accuracy_top-1": 86.0, "accuracy_top-5": 100.0}
{"mode": "val", "epoch": 300, "iter": 4, "lr": 1e-05, "accuracy_top-1": 86.4, "accuracy_top-5": 100.0}
